from google.cloud import datacatalog_v1
from google.cloud import dataplex_v1
from google.protobuf.json_format import MessageToDict

data_catalog_field_types = ['stringValue', 'richtextValue']

def data_catalog_search_for_bq_entry(bq_object_name):
    ''' Get the Entry ID for a given BigQuery object 

    bq_object_name (str): the BigQuery dataset or table in <project>.<dataset>(.<table>) format
    returns: str (the entry ID) or None
    '''
    # extract project name:
    project_id = bq_object_name.split(".")[0]  
    datacatalog = datacatalog_v1.DataCatalogClient()

    # Set custom query.
    search_string = f"name={bq_object_name}"
    scope = datacatalog_v1.types.SearchCatalogRequest.Scope()
    scope.include_project_ids.append(project_id)

    search_results = datacatalog.search_catalog(scope=scope, query=search_string)
    if search_results is not None:
        return  search_results.results[0].relative_resource_name
    else: 
        return None

def get_data_catalog_entry_tag(entry_id):
    ''' Gets the tags attached to a Data Catalog entry
    entry_id (str): the Data Catalog Entry ID in project/<project>/locations/europe-west2/entryGroup/@bigquery/entries<entry_name>
    the entry_name is a unique value generated by Google Data Catalog
   returns: google.cloud.datacatalog_v1.services.data_catalog.pagers.ListTagsPager
    '''
    # Create a client
    client = datacatalog_v1.DataCatalogClient()

    # Initialize request argument(s)
    request = datacatalog_v1.ListTagsRequest(
        parent=entry_id,
    )

    # Make the request
    page_result = client.list_tags(request=request)

    return page_result       

def extract_data_catalog_tag(list_tag_response):
    ''' Extracts the key and values from from Data Catalog Tags fields and returns them as key value pairs
    list_tag_response (google.cloud.datacatalog_v1.services.data_catalog.pagers.ListTagsPager): the response to a Data Catalog ListTag request
    returns: dict
    '''
    tag_fields = {}
    response_json = MessageToDict(list_tag_response._pb)
    for tag in response_json['tags']:
        fields =  tag['fields']
        for field,vls in fields.items():
            key = ''
            keys = vls.keys()
            for item in keys:
                if item in data_catalog_field_types:
                    key = item
            field_name =  field       
            field_value = vls.get(key)
            tag_fields.update({field_name : field_value})

    return tag_fields

def add_dataplex_catalog_aspect_to_entry(bq_object_name, aspect_type, metadata):
    bq_object_name_list = bq_object_name.split(".")
    if len(bq_object_name_list) == 2:
        fqn = f"bigquery.googleapis.com/projects/{bq_object_name_list[0]}/datasets/{bq_object_name_list[1]}"
    else:
        fqn = f"bigquery.googleapis.com/projects/{bq_object_name_list[0]}/datasets/{bq_object_name_list[1]}/tables/{bq_object_name_list[2]}"

    # Create a client
    client = dataplex_v1.CatalogServiceClient()

    # Initialize aspect
    aspect = dataplex_v1.Aspect()
    aspect.data = metadata

    # Initialize request argument(s)
    entry = dataplex_v1.Entry()
    entry.name = f"projects/{bq_object_name_list[0]}/locations/europe-west2/entryGroups/@bigquery/entries/{fqn}"
    entry.aspects = {aspect_type : aspect}


    request = dataplex_v1.UpdateEntryRequest(
        entry=entry,
    )

    # Make the request
    response = client.update_entry(request=request)

    # Handle the response
    print(response)
